<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on @atamanroman - My Personal Space - IT, Development, Software Architecture and Things I Care About</title><link>https://www.atamanroman.dev/tags/docker/</link><description>Recent content in docker on @atamanroman - My Personal Space - IT, Development, Software Architecture and Things I Care About</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 11 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.atamanroman.dev/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>+UseContainerSupport to the Rescue</title><link>https://www.atamanroman.dev/articles/usecontainersupport-to-the-rescue/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://www.atamanroman.dev/articles/usecontainersupport-to-the-rescue/</guid><description>&lt;h2 id="tldr-how-the-jvm-finally-plays-nice-with-containers">TL;DR: How the JVM Finally Plays Nice with Containers&lt;/h2>
&lt;p>Java 10 introduced &lt;code>+UseContainerSupport&lt;/code> (enabled by default) which makes the JVM use sane defaults in a container environment. This feature is backported to Java 8 since &lt;a href="https://www.oracle.com/technetwork/java/javase/8u191-relnotes-5032181.html#JDK-8146115">8u191&lt;/a>, potentially allowing a &lt;a href="https://snyk.io/blog/jvm-ecosystem-report-2018/">huge percentage of Java deployments in the wild&lt;/a> to properly configure their memory.&lt;/p></description></item><item><title>JVM Memory Settings in a Container Environment</title><link>https://www.atamanroman.dev/articles/jvm-memory-settings-container-environment/</link><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.atamanroman.dev/articles/jvm-memory-settings-container-environment/</guid><description>&lt;h2 id="tldr-the-bare-minimum-you-should-know-before-going-live">TL;DR: The Bare Minimum You Should Know Before Going Live&lt;/h2>
&lt;p>Java memory management and configuration is still complex. Although the JVM can read cgroup memory limits and adapt memory usage accordingly since Java 9/8u131, it&amp;rsquo;s not a golden bullet. You need to know what &lt;code>-XX:+UseCGroupMemoryLimitForHeap&lt;/code> does and you need to fine tune some parameters for every deployment. Otherwise you risk wasting resources and money or getting your containers killed at the worst time possible. &lt;code>-XX:MaxRAMFraction=1&lt;/code> is especially dangerous. Java 10+ brings a lot of improvements but still needs manual configuration. To be safe, load test your stuff.&lt;/p></description></item></channel></rss>